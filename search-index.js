var searchIndex = {};
searchIndex["juju"] = {"doc":"A library to interface with Juju.  For more information about Juju see\n[Juju](https://jujucharms.com/docs/stable/about-juju)","items":[[5,"log","juju","Log a message, at an optional log::LogLevel, to the Juju log",null,null],[3,"Status","","",null,null],[12,"status_type","","The type of status",0,null],[12,"message","","A message to show alongside the status",0,null],[3,"Context","","",null,null],[12,"relation_type","","The scope for the current relation hook",1,null],[12,"relation_id","","The relation ID for the current relation hook",1,null],[12,"unit","","Local unit ID",1,null],[12,"relations","","relation data for all related units",1,null],[3,"Relation","","",null,null],[12,"name","","The name of a unit related to your service",2,null],[12,"id","","The id of the unit related to your service",2,null],[3,"Hook","","",null,null],[12,"name","","The name of the hook to call",3,null],[12,"callback","","A function to call when Juju calls this hook\n# Failures\nYour function passed in needs to return a String on error so that users will\nknow what happened.  Ideally this should also be logged with juju::log",3,null],[4,"JujuError","","",null,null],[13,"IoError","","",4,null],[13,"FromUtf8Error","","",4,null],[13,"ParseIntError","","",4,null],[13,"VarError","","",4,null],[13,"AddrParseError","","",4,null],[4,"Transport","","",null,null],[13,"Tcp","","",5,null],[13,"Udp","","",5,null],[4,"StatusType","","For information about what these StatusType variants mean see: [Status reference]\n(https://jujucharms.com/docs/stable/reference-status)",null,null],[13,"Maintenance","","",6,null],[13,"Waiting","","",6,null],[13,"Active","","",6,null],[13,"Blocked","","",6,null],[5,"reboot","","This will reboot your juju instance.  Examples of using this are when a new kernel is installed\nand the virtual machine or server needs to be rebooted to use it.\n# Failures\nReturns stderr if the reboot command fails",null,{"inputs":[],"output":{"name":"result"}}],[5,"action_get_all","","action_get_all gets all values that are set\nSee [Juju Actions](https://jujucharms.com/docs/devel/authors-charm-actions) for more information\n# Failures\nReturns stderr if the action_get command fails",null,{"inputs":[],"output":{"name":"result"}}],[5,"action_get","","action_get gets the value of the parameter at the given key\nSee [Juju Actions](https://jujucharms.com/docs/devel/authors-charm-actions) for more information\n# Failures\nReturns stderr if the action_get command fails",null,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[5,"action_name","","Get the name of the currently executing action\n# Failures\nReturns JujuError if the environment variable JUJU_ACTION_NAME does not exist",null,{"inputs":[],"output":{"name":"result"}}],[5,"action_uuid","","Get the uuid of the currently executing action\n# Failures\nReturns JujuError if the environment variable JUJU_ACTION_UUID does not exist",null,{"inputs":[],"output":{"name":"result"}}],[5,"action_tag","","Get the tag of the currently executing action\n# Failures\nReturns JujuError if the environment variable JUJU_ACTION_TAG does not exist",null,{"inputs":[],"output":{"name":"result"}}],[5,"action_set","","action_set permits the Action to set results in a map to be returned at completion of\nthe Action.\nSee [Juju Actions](https://jujucharms.com/docs/devel/authors-charm-actions) for more\ninformation\n# Failures\nReturns stderr if the action_set command fails",null,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"name":"result"}}],[5,"action_fail","","See [Juju Actions](https://jujucharms.com/docs/devel/authors-charm-actions) for more\ninformation\n# Failures\nReturns stderr if the action_fail command fails",null,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[5,"unit_get_private_addr","","This will return the private IP address associated with the unit.\nIt can be very useful for services that require communicating with the other units related\nto it.\n# Failures\nWill return a String of the stderr if the call fails",null,{"inputs":[],"output":{"name":"result"}}],[5,"unit_get_public_addr","","This will return the public IP address associated with the unit.\n# Failures\nWill return a String of the stderr if the call fails",null,{"inputs":[],"output":{"name":"result"}}],[5,"config_get","","This will return a configuration item that corresponds to the key passed in\n# Failures\nWill return a String of the stderr if the call fails",null,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[5,"config_get_all","","config_get_all will return all configuration options as a HashMap&lt;String,String&gt;\n# Failures\nReturns a String of if the configuration options are not able to be transformed into a HashMap",null,{"inputs":[],"output":{"name":"result"}}],[5,"open_port","","This will expose a port on the unit.  The transport argument will indicate whether tcp or udp\nshould be exposed\n# Failures\nWill return a String of the stderr if the call fails",null,{"inputs":[{"name":"usize"},{"name":"transport"}],"output":{"name":"result"}}],[5,"close_port","","This will hide a port on the unit.  The transport argument will indicate whether tcp or udp\nshould be exposed\n# Failures\nWill return a String of the stderr if the call fails",null,{"inputs":[{"name":"usize"},{"name":"transport"}],"output":{"name":"result"}}],[5,"relation_set","","Set relation information for the current unit\n# Failures\nWill return a String of the stderr if the call fails",null,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"name":"result"}}],[5,"relation_set_by_id","","Sets relation information using a specific relation ID. Used outside of relation hooks\n# Failures\nWill return a String of the stderr if the call fails",null,{"inputs":[{"name":"str"},{"name":"str"},{"name":"relation"}],"output":{"name":"result"}}],[5,"relation_get","","Get relation information for the current unit\n# Failures\nWill return a String of the stderr if the call fails",null,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[5,"relation_get_by_unit","","Get relation information for a specific unit\n# Failures\nWill return a String of the stderr if the call fails",null,{"inputs":[{"name":"str"},{"name":"relation"}],"output":{"name":"result"}}],[5,"relation_get_by_id","","Get relation information using a specific relation ID. Used outside of relation hooks\n# Failures\nWill return a String of the stderr if the call fails",null,{"inputs":[{"name":"str"},{"name":"relation"},{"name":"relation"}],"output":{"name":"result"}}],[5,"relation_list","","Returns a list of all related units\n# Failures\nWill return a String of the stderr if the call fails",null,{"inputs":[],"output":{"name":"result"}}],[5,"relation_list_by_id","","Returns a list of all related units for the supplied identifier\n# Failures\nWill return a String of the stderr if the call fails",null,{"inputs":[{"name":"relation"}],"output":{"name":"result"}}],[5,"relation_ids","","",null,{"inputs":[],"output":{"name":"result"}}],[5,"relation_ids_by_identifier","","Gets the relation IDs by their identifier\n# Failures\nWill return a String of the stderr if the call fails",null,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[5,"status_set","","Set the status of your unit to indicate to the Juju if everything is ok or something is wrong.\nSee the Status enum for information about what can be set.\n# Failures\nWill return a String of the stderr if the call fails",null,{"inputs":[{"name":"status"}],"output":{"name":"result"}}],[5,"status_get","","Retrieve the previously set juju workload state\n# Failures\nWill return a String of the stderr if the call fails",null,{"inputs":[],"output":{"name":"result"}}],[5,"storage_get_location","","If storage drives were allocated to your unit this will get the path of them.\nIn the storage-attaching hook this will tell you the location where the storage\nis attached to.  IE: /dev/xvdf for block devices or /mnt/{name} for filesystem devices\n# Failures\nWill return a String of the stderr if the call fails",null,{"inputs":[],"output":{"name":"result"}}],[5,"storage_get","","Return the location of the mounted storage device.  The mounted\nstorage devices can be gotten by calling storage_list() and\nthen passed into this function to get their mount location.\n# Failures\nWill return a String of the stderr if the call fails",null,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[5,"storage_list","","Used to list storage instances that are attached to the unit.\nThe names returned may be passed through to storage_get\n# Failures\nWill return a String of the stderr if the call fails",null,{"inputs":[],"output":{"name":"result"}}],[5,"process_hooks","","Call this to process your cmd line arguments and call any needed hooks\n# Examples\n```\n    extern crate juju;\n    extern crate log;\n    use std::env;",null,{"inputs":[{"name":"vec"}],"output":{"name":"result"}}],[5,"is_leader","","Returns true/false if this unit is the leader\n# Failures\nWill return stderr as a String if the function fails to run\n# Examples\n```\nextern crate juju;\nlet leader = match juju::is_leader(){\n  Ok(l) =&gt; l,\n  Err(e) =&gt; {\n    println!(&quot;Failed to run.  Error was {:?}&quot;, e);\n    //Bail\n    return;\n  },\n};\nif leader{\n  println!(&quot;I am the leader!&quot;);\n}else{\n  println!(&quot;I am not the leader.  Maybe later I will be promoted&quot;);\n}\n```",null,{"inputs":[],"output":{"name":"result"}}],[11,"fmt","","",4,null],[11,"to_string","","",4,null],[11,"from","","",4,{"inputs":[{"name":"error"}],"output":{"name":"jujuerror"}}],[11,"from","","",4,{"inputs":[{"name":"fromutf8error"}],"output":{"name":"jujuerror"}}],[11,"from","","",4,{"inputs":[{"name":"parseinterror"}],"output":{"name":"jujuerror"}}],[11,"from","","",4,{"inputs":[{"name":"varerror"}],"output":{"name":"jujuerror"}}],[11,"from","","",4,{"inputs":[{"name":"addrparseerror"}],"output":{"name":"jujuerror"}}],[11,"fmt","","",5,null],[11,"fmt","","",6,null],[11,"to_string","","Returns a String representation of the enum variant",6,null],[11,"fmt","","",0,null],[11,"fmt","","",1,null],[11,"new_from_env","","Constructs a new `Context`\nCreates a context that&#39;s filled out from the env variables\n# Example usage\n```\nextern crate juju;\nlet context = juju::Context::new_from_env();\n```",1,{"inputs":[],"output":{"name":"context"}}],[11,"fmt","","",2,null],[11,"fmt","","",3,null],[11,"eq","","",3,null],[11,"ne","","",3,null],[14,"hook","","",null,null],[14,"status_set","","",null,null]],"paths":[[3,"Status"],[3,"Context"],[3,"Relation"],[3,"Hook"],[4,"JujuError"],[4,"Transport"],[4,"StatusType"]]};
searchIndex["charmhelpers"] = {"doc":"","items":[[0,"core","charmhelpers","",null,null],[0,"hookenv","charmhelpers::core","",null,null],[3,"Config","charmhelpers::core::hookenv","",null,null],[3,"Relation","","",null,null],[5,"log","","Log a message, at an optional log::LogLevel, to the Juju log",null,{"inputs":[{"name":"t"},{"name":"option"}],"output":null}],[5,"in_relation_hook","","Are we currently in a hook",null,{"inputs":[],"output":{"name":"bool"}}],[5,"relation_type","","Scope for the current relation hook",null,{"inputs":[],"output":{"name":"option"}}],[5,"local_unit","","Local unit ID",null,{"inputs":[],"output":{"name":"option"}}],[5,"charm_dir","","Charm directory",null,{"inputs":[],"output":{"name":"option"}}],[5,"remote_unit","","The remote unit for the current relation hook",null,{"inputs":[],"output":{"name":"option"}}],[5,"service_name","","The name of the service tha this unit belongs to",null,{"inputs":[],"output":{"name":"option"}}],[5,"hook_name","","Currently executing hook name",null,{"inputs":[],"output":{"name":"option"}}],[5,"relation_id","","id for the current relation",null,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"option"}}],[11,"eq","","",0,null],[11,"fmt","","",0,null],[11,"eq","","",1,null],[11,"fmt","","",1,null]],"paths":[[3,"Config"],[3,"Relation"]]};
searchIndex["log"] = {"doc":"A lightweight logging facade.","items":[[3,"LogRecord","log","The &quot;payload&quot; of a log message.",null,null],[3,"LogMetadata","","Metadata about a log message.",null,null],[3,"LogLocation","","The location of a log message.",null,null],[3,"MaxLogLevelFilter","","A token providing read and write access to the global maximum log level\nfilter.",null,null],[3,"SetLoggerError","","The type returned by `set_logger` if `set_logger` has already been called.",null,null],[3,"ShutdownLoggerError","","The type returned by `shutdown_logger_raw` if `shutdown_logger_raw` has\nalready been called or if `set_logger_raw` has not been called yet.",null,null],[4,"LogLevel","","An enum representing the available verbosity levels of the logging framework",null,null],[13,"Error","","The &quot;error&quot; level.",0,null],[13,"Warn","","The &quot;warn&quot; level.",0,null],[13,"Info","","The &quot;info&quot; level.",0,null],[13,"Debug","","The &quot;debug&quot; level.",0,null],[13,"Trace","","The &quot;trace&quot; level.",0,null],[4,"LogLevelFilter","","An enum representing the available verbosity level filters of the logging\nframework.",null,null],[13,"Off","","A level lower than all log levels.",1,null],[13,"Error","","Corresponds to the `Error` log level.",1,null],[13,"Warn","","Corresponds to the `Warn` log level.",1,null],[13,"Info","","Corresponds to the `Info` log level.",1,null],[13,"Debug","","Corresponds to the `Debug` log level.",1,null],[13,"Trace","","Corresponds to the `Trace` log level.",1,null],[5,"max_log_level","","Returns the current maximum log level.",null,{"inputs":[],"output":{"name":"loglevelfilter"}}],[5,"set_logger","","Sets the global logger.",null,{"inputs":[{"name":"m"}],"output":{"name":"result"}}],[5,"set_logger_raw","","Sets the global logger from a raw pointer.",null,{"inputs":[{"name":"m"}],"output":{"name":"result"}}],[5,"shutdown_logger","","Shuts down the global logger.",null,{"inputs":[],"output":{"name":"result"}}],[5,"shutdown_logger_raw","","Shuts down the global logger.",null,{"inputs":[],"output":{"name":"result"}}],[8,"Log","","A trait encapsulating the operations required of a logger",null,null],[10,"enabled","","Determines if a log message with the specified metadata would be\nlogged.",2,null],[10,"log","","Logs the `LogRecord`.",2,null],[11,"fmt","","",0,null],[11,"clone","","",0,null],[11,"eq","","",0,null],[11,"eq","","",0,null],[11,"partial_cmp","","",0,null],[11,"partial_cmp","","",0,null],[11,"cmp","","",0,null],[11,"from_str","","",0,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",0,null],[11,"max","","Returns the most verbose logging level.",0,{"inputs":[],"output":{"name":"loglevel"}}],[11,"to_log_level_filter","","Converts the `LogLevel` to the equivalent `LogLevelFilter`.",0,null],[11,"fmt","","",1,null],[11,"clone","","",1,null],[11,"eq","","",1,null],[11,"eq","","",1,null],[11,"partial_cmp","","",1,null],[11,"partial_cmp","","",1,null],[11,"cmp","","",1,null],[11,"from_str","","",1,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",1,null],[11,"max","","Returns the most verbose logging level filter.",1,{"inputs":[],"output":{"name":"loglevelfilter"}}],[11,"to_log_level","","Converts `self` to the equivalent `LogLevel`.",1,null],[11,"args","","The message body.",3,null],[11,"metadata","","Metadata about the log directive.",3,null],[11,"location","","The location of the log directive.",3,null],[11,"level","","The verbosity level of the message.",3,null],[11,"target","","The name of the target of the directive.",3,null],[11,"level","","The verbosity level of the message.",4,null],[11,"target","","The name of the target of the directive.",4,null],[11,"clone","","",5,null],[11,"fmt","","",5,null],[11,"module_path","","The module path of the message.",5,null],[11,"file","","The source file containing the message.",5,null],[11,"line","","The line containing the message.",5,null],[11,"fmt","","",6,null],[11,"get","","Gets the current maximum log level filter.",6,null],[11,"set","","Sets the maximum log level.",6,null],[11,"fmt","","",7,null],[11,"fmt","","",7,null],[11,"description","","",7,null],[11,"fmt","","",8,null],[11,"fmt","","",8,null],[11,"description","","",8,null],[14,"log","","The standard logging macro.",null,null],[14,"error","","Logs a message at the error level.",null,null],[14,"warn","","Logs a message at the warn level.",null,null],[14,"info","","Logs a message at the info level.",null,null],[14,"debug","","Logs a message at the debug level.",null,null],[14,"trace","","Logs a message at the trace level.",null,null],[14,"log_enabled","","Determines if a message logged at the specified level in that module will\nbe logged.",null,null]],"paths":[[4,"LogLevel"],[4,"LogLevelFilter"],[8,"Log"],[3,"LogRecord"],[3,"LogMetadata"],[3,"LogLocation"],[3,"MaxLogLevelFilter"],[3,"SetLoggerError"],[3,"ShutdownLoggerError"]]};
initSearch(searchIndex);
